/* eslint-disable @typescript-eslint/no-unused-vars */
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React,{ useState } from 'react';
import { Menu, version, Dropdown, Button } from 'antd';
import { ClickParam } from 'antd/es/menu';
import { DropDownProps } from 'antd/es/dropdown';
import { getLocale, getAllLocales, setLocale } from '@@/plugin-locale/localeExports';

export interface HeaderDropdownProps extends DropDownProps {
  overlayClassName?: string;
  placement?:
    | 'bottomLeft'
    | 'bottomRight'
    | 'topLeft'
    | 'topCenter'
    | 'topRight'
    | 'bottomCenter';
}

const HeaderDropdown: React.FC<HeaderDropdownProps> = ({
  overlayClassName: cls,
  ...restProps
  
}) => (
  <Dropdown
    overlayClassName={cls}
    {...restProps}
  />
);

interface LocalData {
    lang: string,
    label?: string,
    icon?: string,
    title?: string,
}

interface SelectLangProps {
  globalIconClassName?: string;
  postLocalesData?: (locales: LocalData[]) => LocalData[];
  onItemClick?: (params: ClickParam) => void;
  className?: string;
  reload?: boolean;
  icon?: React.ReactNode;
  style?: React.CSSProperties;
}

const defaultLangUConfigMap = {
  'en-US': {
    lang: 'en-US',
    label: 'English',
    icon: 'üá∫üá∏',
    title: 'Language'
 },
  'vi-VN': {
    lang: 'vi-VN',
    label: 'Ti·∫øng Vi·ªát',
    icon: 'üáªüá≥',
    title: 'Ng√¥n ng·ªØ'
  },
};

export const SelectLang: React.FC<SelectLangProps> = (props) => {
  const {
  globalIconClassName,
  postLocalesData,
  onItemClick,
  icon,
  style,
  reload,
  ...restProps
} = props;
  const [selectedLang, setSelectedLang] = useState(() => getLocale());
  const changeLang = ({ key }: ClickParam): void => {
    setLocale(key, reload);
    setSelectedLang(getLocale())
  };

  const icondefaultLangU =  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="16" viewBox="0 0 36 24" fill="none">
                              <rect y="0.00012207" width="36" height="24" rx="2" fill="#DA251D"/>
                              <path d="M17.9999 4.80011L13.7639 17.8201L24.8519 9.78011H11.1479L22.2359 17.8201L17.9999 4.80011Z" fill="#FFFF00"/>
                            </svg>
  const defaultLangUConfig = getAllLocales().map(
    (key) =>
      defaultLangUConfigMap[key] || {
        lang: key,
        label: key,
        icon: {icondefaultLangU},
        title: key,
      }
  );

  const allLangUIConfig =
    postLocalesData?.(defaultLangUConfig) || defaultLangUConfig;
  const handleClick = onItemClick
    ? (params: ClickParam) => onItemClick(params)
    : changeLang;

  const menuItemStyle = { minWidth: "160px" };
  const menuItemIconStyle = { marginRight: "8px" };

  const langMenu = {
    selectedKeys: [selectedLang],
    onClick: handleClick,
    items: allLangUIConfig.map((localeObj) => ({
      key: localeObj.lang || localeObj.key,
      style: menuItemStyle,
      label: (
        <>
          <span role="img" aria-label={localeObj?.label || 'en-US'} style={menuItemIconStyle}>
            {localeObj?.icon || {icondefaultLangU}}
          </span>
          {localeObj?.label || 'en-US'}
        </>
      ),
    })),
  };

  // antd@5 Âíå  4.24 ‰πãÂêéÊé®Ëçê‰ΩøÁî® menuÔºåÊÄßËÉΩÊõ¥Â•Ω
  let dropdownProps;
  if (version.startsWith("5.") || version.startsWith("4.24.")) {
    dropdownProps = { menu: langMenu };
  } else if (version.startsWith("3.")) {
    dropdownProps = {
      overlay: (
        <Menu>
          {langMenu.items.map((item) => (
            <Menu.Item key={item.key} onClick={item.onClick}>
              {item.label}
            </Menu.Item>
          ))}
        </Menu>
      ),
    };
  } else { // ÈúÄË¶Å antd 4.20.0 ‰ª•‰∏äÁâàÊú¨
    dropdownProps = { overlay: <Menu {...langMenu} /> };
  }
  
  const inlineStyle = {
    cursor: "pointer",
    padding: "12px",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    fontSize: 18,
    verticalAlign: "middle",
    ...style,
  };
//  vi-VN

const handleClickChange = (key:any) =>{
  let renameKey = 'vi-VN';
  if(key === 'en-US' || key === 'en'){
    renameKey = 'vi-VN';
  }else if(key === 'vi-VN' || key === 'vi'){
    renameKey = 'en-US';
  }
  setLocale(renameKey, reload);
  setSelectedLang(getLocale())
};

  return (
  <>
    <span className={globalIconClassName} style={inlineStyle} onClick={()=>handleClickChange(selectedLang)}>
        <i className="anticon" title={allLangUIConfig[selectedLang]?.title}>
          { icon ?
            icon : (
              icondefaultLangU
          )}
        </i>
      </span>
  
    {/* <HeaderDropdown {...dropdownProps} placement="bottomRight" {...restProps}>
      <span className={globalIconClassName} style={inlineStyle}>
        <i className="anticon" title={allLangUIConfig[selectedLang]?.title}>
          { icon ?
            icon : (
              icondefaultLangU
          )}
        </i>
      </span>
    </HeaderDropdown> */}
    </>
  );
};
